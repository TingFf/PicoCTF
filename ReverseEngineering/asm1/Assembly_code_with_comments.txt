asm1:
        <+0>:   push   ebp
        <+1>:   mov    ebp,esp
        <+3>:   cmp    DWORD PTR [ebp+0x8],0x3fb        1# Compare 0x2e0 and 0x3fb
        <+10>:  jg     0x512 <asm1+37>                  2# Jump if 0x2e0(736) > 0x3fb(1019)
        <+12>:  cmp    DWORD PTR [ebp+0x8],0x280        3# Compare 0x2e0 and 0x280
        <+19>:  jne    0x50a <asm1+29>                  4# Jump to <asm1+29> if 0x2e0 != 0x280
        <+21>:  mov    eax,DWORD PTR [ebp+0x8]
        <+24>:  add    eax,0xa
        <+27>:  jmp    0x529 <asm1+60>
        <+29>:  mov    eax,DWORD PTR [ebp+0x8]          5# Store 0x2e0 into eax
        <+32>:  sub    eax,0xa                          6# Substract 0x2e0 with 0xa
        <+35>:  jmp    0x529 <asm1+60>                  7# Jump to <asm1+60>
        <+37>:  cmp    DWORD PTR [ebp+0x8],0x559
        <+44>:  jne    0x523 <asm1+54>
        <+46>:  mov    eax,DWORD PTR [ebp+0x8]
        <+49>:  sub    eax,0xa
        <+52>:  jmp    0x529 <asm1+60>
        <+54>:  mov    eax,DWORD PTR [ebp+0x8]
        <+57>:  add    eax,0xa
        <+60>:  pop    ebp                              8# Return eax
        <+61>:  ret    

